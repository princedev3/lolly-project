// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole{
  USER
  ADMIN
}
model User {
  id            String          @id @default(cuid() )
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  role UserRole @default(USER)
  createdAt DateTime @default(now())
  product Product[]
  order Order[]
  userLikesProduct UserLikesProduct[]
  rating Rating[]
}
 
model Account {
  id                String  @id @default(cuid()) 
  userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid()) 
  sessionToken String   @unique
  userId       String  
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
 

model VerificationToken {
  id         String   @id @default(cuid())
  email   String
  identifier String?
  token      String
  expires    DateTime
 
  @@unique([identifier, token,email])
}
 
model Authenticator {
  credentialID         String  @id @default(cuid())
  userId               String  
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
model Product{
id      String   @id @default(uuid())
name String
desc String
price Float
colors String[]
sizes String[]
images String[]
userId String
user User @relation( fields: [userId],references: [id])
quantity Int
brand String?
createAt DateTime @default(now())
userLikesProduct UserLikesProduct[]
  rating Rating[]
}
model  Order{
  id      String   @id @default(uuid())
  product Json[]
  paymentStatus String
  payStackId String @unique
  amount Int
  userId String 
  username String
  userPhone String?
  useremail String
  orderAddress String
  deliveryStatus DeliveryNum @default(one)
  user User @relation(fields: [userId],references: [id])
  createdAt DateTime @default(now())


}
enum DeliveryNum{
  one
  two
  three
}

model NewsletterSubscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}


model UserLikesProduct {
id      String   @id @default(uuid())
  userId     String
  productId  String
  createdAt    DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
  @@index([userId, productId]) 
}

model Rating {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    String
  value     Int    
  comment   String?
  createdAt DateTime @default(now())
}

model Coupon {
  id          String   @id @default(cuid()) 
  code        String   @unique 
  duration   Int    
  expiryDate  DateTime 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([code])
}
